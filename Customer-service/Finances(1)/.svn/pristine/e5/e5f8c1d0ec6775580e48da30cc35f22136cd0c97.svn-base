package com.p2p.controller.back;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.ExcessiveAttemptsException;
import org.apache.shiro.authc.IncorrectCredentialsException;
import org.apache.shiro.authc.LockedAccountException;
import org.apache.shiro.authc.UnknownAccountException;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.subject.Subject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.p2p.service.back.EmpService;

/**
 * 操作人:汪栋才
 * 操作时间:2017-12-18
 * 操作员工的Controller(后台登入登入)
 * */
@Controller
@RequestMapping("/back")
public class EmpController {
	@Resource(name="empServiceImpl")
	private EmpService empService;
	
	
   @RequestMapping("/loginindex")
   public String loginindex(@RequestParam String name,@RequestParam String password,HttpServletRequest request,HttpSession session){
	 
	   UsernamePasswordToken token = new UsernamePasswordToken(name,password);
	   Subject subject = SecurityUtils.getSubject();
	  
	   try {  
           //在调用了login方法后,SecurityManager会收到AuthenticationToken,并将其发送给已配置的Realm执行必须的认证检查  
           //每个Realm都能在必要时对提交的AuthenticationTokens作出反应  
           //所以这一步在调用login(token)方法时,它会走到MyRealm.doGetAuthenticationInfo()方法中,具体验证方式详见此方法  
           System.out.println("对用户[" + name + "]进行登录验证..验证开始");  
           subject.login(token);  
           System.out.println("对用户[" + name + "]进行登录验证..验证通过");  
       }catch(UnknownAccountException uae){  
           System.out.println("对用户[" + name + "]进行登录验证..验证未通过,该账户不存在");  
           session.setAttribute("message_login", "该账户不存在或已被管理员禁用!");  
           return "redirect:/back/tologin";
       }catch(IncorrectCredentialsException ice){  
           System.out.println("对用户[" + name + "]进行登录验证..验证未通过,密码错误"); 
           session.setAttribute("message_login", "密码不正确!"); 
           return "redirect:/back/tologin";
       }catch(LockedAccountException lae){  
           System.out.println("对用户[" + name + "]进行登录验证..验证未通过,账户已锁定");  
           request.setAttribute("message_login", "账户已锁定!");  
       }catch(ExcessiveAttemptsException eae){  
           System.out.println("对用户[" + name + "]进行登录验证..验证未通过,错误次数过多");  
           request.setAttribute("message_login", "用户名或密码错误次数过多!");  
       }catch(AuthenticationException ae){  
           //通过处理Shiro的运行时AuthenticationException就可以控制用户登录失败或密码错误时的情景  
           System.out.println("对用户[" + name + "]进行登录验证..验证未通过,堆栈轨迹如下");  
           //ae.printStackTrace();  
           session.setAttribute("message_login", "账号或密码不正确!");  
           return "redirect:/back/tologin";
       }  
       //验证是否登录成功  
       if(subject.isAuthenticated()){  
           System.out.println("用户[" + name + "]登录认证通过..账号密码正确");  
           return "redirect:/back/toindex";
       }else{  
           token.clear();  
           return "redirect:/back/tologin";
       }  

   }

}
